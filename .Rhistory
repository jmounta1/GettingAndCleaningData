gather(key = "col", value = "abs", -`plateRow`)
temp$plateRow <- fct_rev(temp$plateRow)
ggplot(temp, aes(col, plateRow)) +
geom_raster(aes(fill = abs))
})
}
shinyApp(ui, server)
library(shiny); runApp('quantifyProtein.R')
# This script will automatically quantify protein concentration
# Its input should be the output from the plate reader
# TODO
# Take std range as an argument for where the standards were placed
# Would be much easier with a GUI
# Ascending or descending std arguments
# Simple setting of corners for non-standard standard placement
# Allow to specify number of samples
# If/else or switch for xls/xlsx case
# Only present necessary information. Stow away the rest in an 'advanced' tab
# Prepare workspace
library(tidyverse)
library(readxl)
library(shiny)
library(forcats)
# Define functions
findMean <- function(df){
test <- df$absorbance %>%
dist() %>%
hclust()
potOutlierPos <- test$merge[nrow(df) - 1, 1] %>%
abs()
potOutlier <- df$absorbance[potOutlierPos]
sansOutlier <- df$absorbance[-potOutlierPos]
meanSans <- mean(sansOutlier)
sdSans <- sd(sansOutlier)
myDat <- list(df$concentration, df$absorbance, meanSans, sdSans)
}
findMeanSample <- function(df){
test <- df$absorbance %>%
dist() %>%
hclust()
potOutlierPos <- test$merge[nrow(df) - 1, 1] %>%
abs()
potOutlier <- df$absorbance[potOutlierPos]
sansOutlier <- df$absorbance[-potOutlierPos]
meanSans <- mean(sansOutlier)
sdSans <- sd(sansOutlier)
myDat <- list(df$concentration, df$absorbance, meanSans, sdSans)
}
myTemp <- myStandards %>%
group_by(standard) %>%
nest() %>%
mutate(meanWithoutOutlier = map(data, findMean)) %>%
select(-data) %>%
unnest() %>%
mutate(cols = c("Concentration", "Absorbance", "Adjusted Mean", "SD")) %>%
spread(key = cols, value = meanWithoutOutlier) %>%
unnest() %>%
mutate(isBetwixt = case_when(`Adjusted Mean` - 3*SD < Absorbance & `Adjusted Mean` + 3*SD > Absorbance ~ T, T ~ F))
# ---- Shiny UI ----
ui <- fluidPage(
titlePanel("Protein Quantification"),
sidebarLayout(
sidebarPanel(
fileInput("file", "Upload SpectraMAX Excel File"),
radioButtons("sampleOrientation", "Sample Orientation", choices = c("Horizontal" = "horiz", "Vertical" = "vert")),
numericInput("targetConc", "Target Concentration Before Sample Buffer (mg/mL)", 1.2),
numericInput("targetVol", "Target Volume Before Sample Buffer (uL)", 60)
),
mainPanel(
tabsetPanel(
tabPanel("Absorbances", tableOutput("absTable")),
tabPanel("Standard Table", tableOutput("stdTable")),
tabPanel("Standard Plot", plotOutput("stdPlot")),
tabPanel("Sample Table", tableOutput("sampTable")),
tabPanel("Sample Summary", tableOutput("sampSum")),
tabPanel("Plate Heatmap", plotOutput("plateHeat"))
),
),
),
)
# ---- Shiny Server ----
server <- function(input, output) {
absorbances <- eventReactive(input$file, {
temp <- read_xlsx(input$file$datapath, col_names = T)
temp[,-1]
})
plateHeatmap <- eventReactive(input$file, {
temp <- absorbances()
colnames(temp) <- c(as.character(1:12))
temp <- rbind(LETTERS[1:8], temp) %>%
gather(key = "column", value = "absorbance", temp[,2:13])
})
standards <- eventReactive({input$sampleOrientation
input$file}, {
temp <- switch(input$sampleOrientation,
horiz = absorbances()[1:3,1:7],
vert = t(absorbances()[1:7,1:3]))
colnames(temp) <- c("1", "2", "3", "4", "5", "6", "7")
standards <- temp %>%
as_tibble() %>%
gather(key = "standard", value = "absorbance") %>%
add_column(concentration = c(0, 0, 0, rep(.125*2^(0:5), each = 3))) %>%
group_by(standard) %>%
nest() %>%
mutate(meanWithoutOutlier = map(data, findMean)) %>%
select(-data) %>%
unnest() %>%
mutate(cols = c("Concentration", "Absorbance", "Adjusted Mean", "SD")) %>%
spread(key = cols, value = meanWithoutOutlier) %>%
unnest() %>%
mutate(isBetwixt = case_when(`Adjusted Mean` - 3*SD < Absorbance & `Adjusted Mean` + 3*SD > Absorbance ~ T, T ~ F))
})
fit <- eventReactive({input$sampleOrientation
input$file}, {
standards <- standards() %>%
filter(isBetwixt)
lm(Absorbance ~ Concentration, standards)
})
samples <- eventReactive({input$sampleOrientation
input$file}, {
temp0 <- setNames(absorbances(), rep("Sample", times = 12))
temp <- switch(input$sampleOrientation,
horiz = cbind(temp0[1:3,8:12], temp0[4:6, 1:12]),
vert = as_tibble(t(rbind(temp0[8,1:3], temp0[1:8,4:6], temp0[1:8,7:9], temp0[1:8,10:12]))))
temp <- setNames(temp, paste("Sample", sprintf('%0.2d', 1:ncol(temp))))
samples <- temp %>%
as_tibble() %>%
gather(key = "samples", value = "absorbance") %>%
add_column(concentration = 0) %>%
group_by(samples) %>%
nest() %>%
mutate(meanWithoutOutlier = map(data, findMean)) %>%
select(-data) %>%
unnest() %>%
mutate(cols = c("Concentration", "Absorbance", "Adjusted Mean", "SD")) %>%
spread(key = cols, value = meanWithoutOutlier) %>%
unnest() %>%
mutate(isBetwixt = case_when(`Adjusted Mean` - 3*SD < Absorbance & `Adjusted Mean` + 3*SD > Absorbance ~ T, T ~ F)) %>%
mutate(Concentration = (`Adjusted Mean` - fit()$coefficients[1])/fit()$coefficients[2])
})
sampleSummary <- eventReactive({input$sampleOrientation
input$file
input$targetConc
input$targetVol}, {
temp <- unique(samples()[,c(1,4)]) %>%
add_column(targetConc = input$targetConc, targetVol = input$targetVol) %>%
mutate(proteinToAdd = targetConc * targetVol/Concentration,
bufferToAdd = targetVol - proteinToAdd)
})
output$absTable <- renderTable({
absTable <- cbind(`Row/Column` = LETTERS[1:8], absorbances())
})
output$stdTable <- renderTable({
standards()
})
output$stdPlot <- renderPlot({
samples <- cbind(samples()[,c(2,4,6)], type = "Sample")
standards <- cbind(standards()[,c(2,4,6)], type = "Standard")
samples <- rbind(samples, standards)
ggplot(samples, aes(x = Concentration, y = Absorbance, col = type, shape = isBetwixt, size = 2)) +
scale_shape_manual(values = c(4, 16)) +
geom_point() +
geom_abline(aes(intercept = fit()$coefficients[1], slope = fit()$coefficients[2], size = 1.5, alpha = 0.5)) +
guides(alpha = F, size = F)
})
output$sampTable <- renderTable({
samples()
})
output$sampSum <- renderTable({
sampleSummary()
})
output$plateHeat <- renderPlot({
temp <- absorbances()
colnames(temp) <- c("col01", "col02", "col03", "col04", "col05", "col06", "col07", "col08", "col09", "col10", "col11", "col12")
temp <- cbind(plateRow = LETTERS[1:8], temp) %>%
gather(key = "col", value = "abs", -`plateRow`)
temp$plateRow <- fct_rev(temp$plateRow)
ggplot(temp, aes(col, plateRow)) +
geom_raster(aes(fill = abs))
})
}
shinyApp(ui, server)
library(shiny); runApp('quantifyProtein.R')
# This script will automatically quantify protein concentration
# Its input should be the output from the plate reader
# TODO
# Take std range as an argument for where the standards were placed
# Would be much easier with a GUI
# Ascending or descending std arguments
# Simple setting of corners for non-standard standard placement
# Allow to specify number of samples
# If/else or switch for xls/xlsx case
# Only present necessary information. Stow away the rest in an 'advanced' tab
# Prepare workspace
library(tidyverse)
library(readxl)
library(shiny)
library(forcats)
# Define functions
findMean <- function(df){
test <- df$absorbance %>%
dist() %>%
hclust()
potOutlierPos <- test$merge[nrow(df) - 1, 1] %>%
abs()
potOutlier <- df$absorbance[potOutlierPos]
sansOutlier <- df$absorbance[-potOutlierPos]
meanSans <- mean(sansOutlier)
sdSans <- sd(sansOutlier)
myDat <- list(df$concentration, df$absorbance, meanSans, sdSans)
}
findMeanSample <- function(df){
test <- df$absorbance %>%
dist() %>%
hclust()
potOutlierPos <- test$merge[nrow(df) - 1, 1] %>%
abs()
potOutlier <- df$absorbance[potOutlierPos]
sansOutlier <- df$absorbance[-potOutlierPos]
meanSans <- mean(sansOutlier)
sdSans <- sd(sansOutlier)
myDat <- list(df$concentration, df$absorbance, meanSans, sdSans)
}
myTemp <- myStandards %>%
group_by(standard) %>%
nest() %>%
mutate(meanWithoutOutlier = map(data, findMean)) %>%
select(-data) %>%
unnest() %>%
mutate(cols = c("Concentration", "Absorbance", "Adjusted Mean", "SD")) %>%
spread(key = cols, value = meanWithoutOutlier) %>%
unnest() %>%
mutate(isBetwixt = case_when(`Adjusted Mean` - 3*SD < Absorbance & `Adjusted Mean` + 3*SD > Absorbance ~ T, T ~ F))
# ---- Shiny UI ----
ui <- fluidPage(
titlePanel("Protein Quantification"),
sidebarLayout(
sidebarPanel(
fileInput("file", "Upload SpectraMAX Excel File"),
radioButtons("sampleOrientation", "Sample Orientation", choices = c("Horizontal" = "horiz", "Vertical" = "vert")),
numericInput("targetConc", "Target Concentration Before Sample Buffer (mg/mL)", 1.2),
numericInput("targetVol", "Target Volume Before Sample Buffer (uL)", 60)
),
mainPanel(
tabsetPanel(
tabPanel("Absorbances", tableOutput("absTable")),
tabPanel("Standard Table", tableOutput("stdTable")),
tabPanel("Standard Plot", plotOutput("stdPlot")),
tabPanel("Sample Table", tableOutput("sampTable")),
tabPanel("Sample Summary", tableOutput("sampSum")),
tabPanel("Plate Heatmap", plotOutput("plateHeat"))
),
),
),
)
# ---- Shiny Server ----
server <- function(input, output) {
absorbances <- eventReactive(input$file, {
temp <- read_xlsx(input$file$datapath, col_names = T)
temp[,-1]
})
plateHeatmap <- eventReactive(input$file, {
temp <- absorbances()
colnames(temp) <- c(as.character(1:12))
temp <- rbind(LETTERS[1:8], temp) %>%
gather(key = "column", value = "absorbance", temp[,2:13])
})
standards <- eventReactive({input$sampleOrientation
input$file}, {
temp <- switch(input$sampleOrientation,
horiz = absorbances()[1:3,1:7],
vert = t(absorbances()[1:7,1:3]))
colnames(temp) <- c("1", "2", "3", "4", "5", "6", "7")
standards <- temp %>%
as_tibble() %>%
gather(key = "standard", value = "absorbance") %>%
add_column(concentration = c(0, 0, 0, rep(.125*2^(0:5), each = 3))) %>%
group_by(standard) %>%
nest() %>%
mutate(meanWithoutOutlier = map(data, findMean)) %>%
select(-data) %>%
unnest() %>%
mutate(cols = c("Concentration", "Absorbance", "Adjusted Mean", "SD")) %>%
spread(key = cols, value = meanWithoutOutlier) %>%
unnest() %>%
mutate(isBetwixt = case_when(`Adjusted Mean` - 3*SD < Absorbance & `Adjusted Mean` + 3*SD > Absorbance ~ T, T ~ F))
})
fit <- eventReactive({input$sampleOrientation
input$file}, {
standards <- standards() %>%
filter(isBetwixt)
lm(Absorbance ~ Concentration, standards)
})
samples <- eventReactive({input$sampleOrientation
input$file}, {
temp0 <- setNames(absorbances(), rep("Sample", times = 12))
temp <- switch(input$sampleOrientation,
horiz = cbind(temp0[1:3,8:12], temp0[4:6, 1:12]),
vert = as_tibble(t(rbind(temp0[8,1:3], temp0[1:8,4:6], temp0[1:8,7:9], temp0[1:8,10:12]))))
temp <- setNames(temp, paste("Sample", sprintf('%0.2d', 1:ncol(temp))))
samples <- temp %>%
as_tibble() %>%
gather(key = "samples", value = "absorbance") %>%
add_column(concentration = 0) %>%
group_by(samples) %>%
nest() %>%
mutate(meanWithoutOutlier = map(data, findMean)) %>%
select(-data) %>%
unnest() %>%
mutate(cols = c("Concentration", "Absorbance", "Adjusted Mean", "SD")) %>%
spread(key = cols, value = meanWithoutOutlier) %>%
unnest() %>%
mutate(isBetwixt = case_when(`Adjusted Mean` - 3*SD < Absorbance & `Adjusted Mean` + 3*SD > Absorbance ~ T, T ~ F)) %>%
mutate(Concentration = (`Adjusted Mean` - fit()$coefficients[1])/fit()$coefficients[2])
})
sampleSummary <- eventReactive({input$sampleOrientation
input$file
input$targetConc
input$targetVol}, {
temp <- unique(samples()[,c(1,4)]) %>%
add_column(targetConc = input$targetConc, targetVol = input$targetVol) %>%
mutate(proteinToAdd = targetConc * targetVol/Concentration,
bufferToAdd = targetVol - proteinToAdd)
})
output$absTable <- renderTable({
absTable <- cbind(`Row/Column` = LETTERS[1:8], absorbances())
})
output$stdTable <- renderTable({
standards()
})
output$stdPlot <- renderPlot({
samples <- cbind(samples()[,c(2,4,6)], type = "Sample")
standards <- cbind(standards()[,c(2,4,6)], type = "Standard")
samples <- rbind(samples, standards)
ggplot(samples, aes(x = Concentration, y = Absorbance, col = type, shape = isBetwixt, size = 2)) +
scale_shape_manual(values = c(4, 16)) +
geom_point() +
geom_abline(aes(intercept = fit()$coefficients[1], slope = fit()$coefficients[2], size = 1.5, alpha = 0.5)) +
guides(alpha = F, size = F)
})
output$sampTable <- renderTable({
samples()
})
output$sampSum <- renderTable({
sampleSummary()
})
output$plateHeat <- renderPlot({
temp <- absorbances()
colnames(temp) <- c("col01", "col02", "col03", "col04", "col05", "col06", "col07", "col08", "col09", "col10", "col11", "col12")
temp <- cbind(plateRow = LETTERS[1:8], temp) %>%
gather(key = "col", value = "abs", -`plateRow`)
temp$plateRow <- fct_rev(temp$plateRow)
ggplot(temp, aes(col, plateRow)) +
geom_raster(aes(fill = abs))
})
}
shinyApp(ui, server)
ruby -rsecurerandom -e 'puts SecureRandom.hex(20)'
library(httr)
oauth_endpoints('github')
myapp <- oauth_app('github',
key = '7f92cdb6b1bcd78ec8cc',
secret = '5fb36b1c4239b6efb88f4decfb52f5a1c91d5264'
)
github_token <- oauth2.0_token(oauth_endpoints('github'), myapp)
gtoken <- config(token = github_token)
req <- GET('https://api.github.com/rate_limit', gtoken)
stop_for_status(req)
content(req)
library(httr)
oauth_endpoints('github')
myapp <- oauth_app('github',
key = '7f92cdb6b1bcd78ec8cc',
secret = '5fb36b1c4239b6efb88f4decfb52f5a1c91d5264'
)
github_token <- oauth2.0_token(oauth_endpoints('github'), myapp)
gtoken <- config(token = github_token)
req <- GET('https://github.com/r-lib/httr/blob/master/demo/oauth2-github.r', gtoken)
stop_for_status(req)
content(req)
View(req)
library(httr)
oauth_endpoints('github')
myapp <- oauth_app('github',
key = '7f92cdb6b1bcd78ec8cc',
secret = '5fb36b1c4239b6efb88f4decfb52f5a1c91d5264'
)
github_token <- oauth2.0_token(oauth_endpoints('github'), myapp)
gtoken <- config(token = github_token)
req <- GET(https://api.github.com/users/jtleek/repos', gtoken)
stop_for_status(req)
content(req)
library(httr)
oauth_endpoints('github')
myapp <- oauth_app('github',
key = '7f92cdb6b1bcd78ec8cc',
secret = '5fb36b1c4239b6efb88f4decfb52f5a1c91d5264'
)
github_token <- oauth2.0_token(oauth_endpoints('github'), myapp)
gtoken <- config(token = github_token)
req <- GET('https://api.github.com/users/jtleek/repos', gtoken)
stop_for_status(req)
content(req)
View(req)
lines <- readLines(req)
lines
req
names(req)
names(req$name)
names(req$url)
names(req)
req$url
library(jsonlite)
jsonData <- fromJSON('https://api.github.com/users/jtleek/repos')
names(jsonData)
jsonData$names
jsonData$name
jsonData$name$datasharing
names(jsonData$name$datasharing)
names(jsonData$name)
jsonData$name
?sqldf
library(sqldf)
?install.packages
install.package('sqldf')
install.packages('sqldf')
?sqldf
library(sqldf)
?sqldf
sqldf('select pwgtp1 from acs')
library(sqldf)
acs <- read.csv('ACSdata.csv')
pwd
getwd()
setwd('gettingandcleaningdata')
getwd()
library(sqldf)
acs <- read.csv('ACSdata.csv')
sqldf('select pwgtp1 from acs')
nrows(acs$pwgtp1)
?rows
?nrows
??nrows
?size
?dim
dim(acs$pwgtp1)
acs$pwgtp1
sqldf('select * from acs')
sqldf('select * from acs where AGEP < 50')
sqldf('select pwgtp1 from acs where AGEP < 50')
unique(acs$AGEP)
?stop_for_status
?GET
library(XML)
library(RCurl)
library(jsonlite)
library(data.table)
URL <- 'http://biostat.jhsph.edu/~jleek/contact.html'
jleek <- getURL(URL)
jleek_data <- fread(jleek)
con = url('http://biostat.jhsph.edu/~jleek/contact.html')
htmlCode = readlines(con)
close(con)
htmlCode
con = url('http://biostat.jhsph.edu/~jleek/contact.html')
htmlCode = readLines(con)
close(con)
htmlCode
nchar(htmlCode)
list[1]
list <- nchar(htmlCode)
list[1]
list[10]
list[20]
list[30]
list[100]
SST <- read.fwf('getdata_wksst8110.for')
SST
?read.fwf
SST <- read.fwf('getdata_wksst8110.for', 1)
SST
SST <- read.fwf('getdata_wksst8110.for', 9)
SST
View(SST)
SST <- read.fwf('getdata_wksst8110.for', 9)''
SST <- read.fwf('getdata_wksst8110.for', 9)'
SST
View(SST)
SST <- read.fwf('getdata_wksst8110.for', 9)
SST
View(SST)
SST <- read.fwf('getdata_wksst8110.for', 4)
View(SST)
SST
SST <- read.fwf('getdata_wksst8110.for', 9, header = TRUE)
SST
View(SST)
SST <- read.fwf('getdata_wksst8110.for', widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
SST
View(SST)
SST <- read.fwf('getdata_wksst8110.for', skip = 4 widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
SST
View(SST)
SST <- read.fwf('getdata_wksst8110.for', skip = 4, widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
View(SST)
View(SST)
colSums(SST$V4)
?colsums
colSums()
?colSums
?sum
sum(SST$V4)
