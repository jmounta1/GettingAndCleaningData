View(x)
z
x <- split(dataset_subset[ ,2:ncol(dataset_subset)], dataset_subset$subject_number)   #x is a list with each element containing a matrix of values related to a single subject
z <- x$`1`
z
View(x)
class(x$`1`$activity)
x[1]
y <- lapply(x[1],colMeans)
y <- lapply(x[1][ ,3:ncol(x[1])],colMeans)
y <- lapply(x[1][ ,3:length(x[1])],colMeans)
y <- lapply(x[1][3:length(x[1]),colMeans)
y <- lapply(x[1][3:length(x[1])],colMeans)
x[1]
str(x[1])
str(x$`1`)
str(x[[1]])
y <- lapply(x[[1]][3:ncol(x[[1])],colMeans)
y <- lapply(x[[1]][3:ncol(x[[1]])],colMeans)
dim(x[[1]])
dataset_subset <- as.character(dataset_subset$activity)   #don't know why activity column was converted to list, but changed back to char
x <- split(dataset_subset[ ,2:ncol(dataset_subset)], dataset_subset$subject_number)   #x is a list with each element containing a matrix of values related to a single subject
rm(list=ls())
## Course project for week 4 of 'Getting and Cleaning Data' course on Coursera
## from github repo jmounta1/GettingAndCleaningData/week4
## Project goal: create a tidy data set based on accelerometer data from the Samsung Galazy S smartphone
# load packages
library(tidyverse)
library(lubridate)
# download zip file, unzip, load in data  DO THIS AFTER YOU FINISH THE REST OF THE CODE -------------------------
#fileUrl <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
#temp <- tempfile()
#download.file(fileUrl, temp)
#vars <- read.table(unz(temp,'UCI HAR Dataset/features.txt'))    # variable names for the data sets
#dataset_test <- read.table(unz(temp, 'UCI HAR Dataset/test/X_test'))
#activity <- read.table(unz(temp, 'UCI HAR Dataset/test/y_test'))
# temporary method to load in data (using jmounta1 local directories)
vars <- scan('~/GettingAndCleaningData/week4/UCI HAR Dataset/features.txt', what = character(), sep = '\n')
activity_labels <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/activity_labels.txt', col_names = F)
dataset_test <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/test/X_test.txt')
dataset_train <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/train/X_train.txt')
activities_test <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/test/y_test.txt')
activities_train <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/train/y_train.txt')
subjects_test <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/test/subject_test.txt')
subjects_train <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/train/subject_train.txt')
# tidy data, label datasets
vars <- str_extract(vars, '\\D.*')    #get rid of the numbers in front of the variable names
colnames(dataset_test) <- vars
colnames(dataset_train) <- vars
colnames(activities_test) <- 'activity'
colnames(activities_train) <- 'activity'
colnames(subjects_test) <- 'subject_number'
colnames(subjects_train) <- 'subject_number'
# append activities and subject columns to datasets, label test/train datasets to prepare for dataset merge
label_test <- rep('test', dim(dataset_test)[1])
label_train <- rep('training', dim(dataset_train)[1])
dataset_test <- cbind(label_test, subjects_test, activities_test, dataset_test)
dataset_train <- cbind(label_train, subjects_train, activities_train, dataset_train)
colnames(dataset_test)[1] <- 'dataset_label'
colnames(dataset_train)[1] <- 'dataset_label'
# merge datasets via rbind function, rename activity column from nums to char descriptions
dataset_total <- rbind(dataset_test, dataset_train)
dataset_total$activity <- as.numeric(dataset_total$activity)
index <- 1    # initialize index for counting in the for loop
for (i in dataset_total$activity) {
dataset_total$activity[index] <- activity_labels[i,2]
index <- index + 1
}
# subset the data table to include test/training label, activity description, mean(), and std() for each measurement using regex
colnames(dataset_total) <- tolower(colnames(dataset_total))
subset <- str_which(colnames(dataset_total), '(dataset_label)|(subject_number)|(activity)|(mean\\(\\))|std\\(\\)')
dataset_subset <- dataset_total[ ,subset]
dataset_subset$activity <- as.character(dataset_subset$activity)   #don't know why activity column was converted to list, but changed back to char
# create a new tidy dataset that takes the average of each variable per activity per subject
# do this by splitting data frame by subject, then use tapply to find averages for each activity per subject
dataset_tidy <- data.frame()
x <- split(dataset_subset[ ,2:ncol(dataset_subset)], dataset_subset$subject_number)   #x is a list with each element containing a matrix of values related to a single subject
y <- lapply(x[[1]][3:ncol(x[[1]])],colMeans)
class(dataset_subset$activity)
View(x)
lapply(x, print('yay')
lapply(x, print('yay'))
lapply(x, print('yay'))
lapply(x, print
lapply(x, print
)
lapply(x, print)
lapply(x, split(dataset_subset$activity))
lapply(x, split( ,dataset_subset$activity))
y <- split(x,dataset_subset$activity)
View(x)
y <- lapply(x, colMeans)
?subset
?subset
x <- split(dataset_subset[ ,4:ncol(dataset_subset)], dataset_subset$subject_number)   #x is a list with each element containing a matrix of values related to a single subject
View(x)
y <- lapply(x, colMeans)
View(y)
x <- split(dataset_subset[ ,3:ncol(dataset_subset)], dataset_subset$subject_number)   #x is a list with each element containing a matrix of values related to a single subject
tapply(x$`1`,x$`1`$activity,mean)
x$`1`
?tapply
dim(x[[1]])
length(x[[1]]$activity)
tapply(x[[1]],x[[1]]$activity,mean)
class(x[[1]])
z <- x[[1]]
tapply(z, z$activity, mean)
tapply(z$` tbodyacc-mean()-x`, z$activity, mean)
q <- tapply(z$` tbodyacc-mean()-x`, z$activity, mean)
class(q)
length(q)
?replace
rm(y)
rm(Z)
rm(z)
x[[1]]
lapply(x[[1]],colMeans)
sapply(x[[1]],colMeans)
lapply(x[[1]],x[[1]][['activity']],colMeans)
tapply(x[[1]],x[[1]][['activity']],colMeans)
tapply(x[[1]][,2],x[[1]][['activity']],colMeans)
x[[1]]
x[[1]][,2]
x[[1]][,1]
length(x[[1]][,2])
tapply(x[[1]][,2],x[[1]][,1],mean)
x <- split(dataset_subset[ ,3:ncol(dataset_subset)], dataset_subset$subject_number)   #x is a list with each element containing a matrix of values related to a single subject
View(x)
z <- data.frame()
index <- 1
for (k in x) {
z[index] <- split(k, k[['activity']])
index <- index + 1
}
z <- data.frame()
index <- 1
for (k in x) {
z <- split(k, k[['activity']])
index <- index + 1
}
View(z)
?list
z <- list()
index <- 1
for (k in x) {
z[[index]] <- split(k, k[['activity']])
index <- index + 1
}
View(z)
z[[1]
]
colMeans(z[[1]]$LAYING)
z[[1]]$LAYING
z <- list()   #initialize list to contain all splits
index <- 1
for (k in x) {    #couldn't figure out how to use apply to do this since the factor arg in split changes for each element in x
z[[index]] <- split(k[,2:ncol(k)], k[['activity']])
index <- index + 1
}
z[[1]]
colMeans([[z]][1])
colMeans([[z]])
colMeans(z)
z
View(z)
View(z[[1]])
View(z[[1]][1])
View(z[[1]][['LAYING']])
colMeans(z[[1]][['LAYING']])
dataset_tidy <- data.frame()
for (l in z) {
for (m in l) {
row_means <- colMeans(m)
dataset_tidy <- rbind(dataset_tidy, row_means)
}
}
View(dataset_tidy)
x <- split(dataset_subset[ ,ncol(dataset_subset)], dataset_subset$subject_number)   #x is a list with each element containing a matrix of values related to a single subject
z <- list()   #initialize list to contain all splits
index <- 1
for (k in x) {    #couldn't figure out how to use apply to do this since the factor arg in split changes for each element in x
z[[index]] <- split(k[,ncol(k)], k[['activity']])
index <- index + 1
}
x <- split(dataset_subset[ ,ncol(dataset_subset)], dataset_subset$subject_number)   #x is a list with each element containing a matrix of values related to a single subject
z <- list()   #initialize list to contain all splits
index <- 1
for (k in x) {    #couldn't figure out how to use apply to do this since the factor arg in split changes for each element in x
z[[index]] <- split(k, k[['activity']])
index <- index + 1
}
View(x)
x <- split(dataset_subset[ ,ncol(dataset_subset)], dataset_subset$subject_number)   #x is a list with each element containing a matrix of values related to a single subject
z <- list()   #initialize list to contain all splits
index <- 1
for (k in x) {    #couldn't figure out how to use apply to do this since the factor arg in split changes for each element in x
z[[index]] <- split(k[ ,1:ncol(k)], k[['activity']])
index <- index + 1
}
x <- split(dataset_subset[ ,1:ncol(dataset_subset)], dataset_subset$subject_number)   #x is a list with each element containing a matrix of values related to a single subject
z <- list()   #initialize list to contain all splits
index <- 1
for (k in x) {    #couldn't figure out how to use apply to do this since the factor arg in split changes for each element in x
z[[index]] <- split(k[ ,1:ncol(k)], k[['activity']])
index <- index + 1
}
View(x)
rm(list=ls())
# load packages
library(tidyverse)
library(lubridate)
# download zip file, unzip, load in data  DO THIS AFTER YOU FINISH THE REST OF THE CODE -------------------------
#fileUrl <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
#temp <- tempfile()
#download.file(fileUrl, temp)
#vars <- read.table(unz(temp,'UCI HAR Dataset/features.txt'))    # variable names for the data sets
#dataset_test <- read.table(unz(temp, 'UCI HAR Dataset/test/X_test'))
#activity <- read.table(unz(temp, 'UCI HAR Dataset/test/y_test'))
# temporary method to load in data (using jmounta1 local directories)
vars <- scan('~/GettingAndCleaningData/week4/UCI HAR Dataset/features.txt', what = character(), sep = '\n')
activity_labels <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/activity_labels.txt', col_names = F)
dataset_test <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/test/X_test.txt')
dataset_train <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/train/X_train.txt')
activities_test <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/test/y_test.txt')
activities_train <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/train/y_train.txt')
subjects_test <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/test/subject_test.txt')
subjects_train <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/train/subject_train.txt')
# tidy data, label datasets
vars <- str_extract(vars, '\\D.*')    #get rid of the numbers in front of the variable names
colnames(dataset_test) <- vars
colnames(dataset_train) <- vars
colnames(activities_test) <- 'activity'
colnames(activities_train) <- 'activity'
colnames(subjects_test) <- 'subject_number'
colnames(subjects_train) <- 'subject_number'
# append activities and subject columns to datasets
dataset_test <- cbind(subjects_test, activities_test, dataset_test)
dataset_train <- cbind(subjects_train, activities_train, dataset_train)
# merge datasets via rbind function, rename activity column from nums to char descriptions
dataset_total <- rbind(dataset_test, dataset_train)
dataset_total$activity <- as.numeric(dataset_total$activity)
index <- 1    # initialize index for counting in the for loop
for (i in dataset_total$activity) {
dataset_total$activity[index] <- activity_labels[i,2]
index <- index + 1
}
# subset the data table to include test/training label, activity description, mean(), and std() for each measurement using regex
colnames(dataset_total) <- tolower(colnames(dataset_total))
subset <- str_which(colnames(dataset_total), '(subject_number)|(activity)|(mean\\(\\))|std\\(\\)')
dataset_subset <- dataset_total[ ,subset]
dataset_subset$activity <- as.character(dataset_subset$activity)   #don't know why activity column was converted to list, but changed back to char
# create a new tidy dataset that takes the average of each variable per activity per subject
# do this by splitting data frame by subject, then use a for loop to further split into
x <- split(dataset_subset[ ,1:ncol(dataset_subset)], dataset_subset$subject_number)   #x is a list with each element containing a matrix of values related to a single subject
z <- list()   #initialize list to contain all splits (by subject and further by activity)
index <- 1
for (k in x) {    #couldn't figure out how to use apply to do this since the factor arg in split changes for each element in x
z[[index]] <- split(k[ ,1:ncol(k)], k[['activity']])
index <- index + 1
}
z <- list()   #initialize list to contain all splits (by subject and further by activity)
index <- 1
for (k in x) {    #couldn't figure out how to use apply to do this since the factor arg in split changes for each element in x
z[index] <- split(k[ ,1:ncol(k)], k[['activity']])
index <- index + 1
}
warnings()
z <- list()   #initialize list to contain all splits (by subject and further by activity)
index <- 1
for (k in x) {    #couldn't figure out how to use apply to do this since the factor arg in split changes for each element in x
z[[index]] <- split(k[ ,1:ncol(k)], k[['activity']])
index <- index + 1
}
View(z)
?data.frame
dataset_tidy <- data.frame()    #initialize data frame to add means to
for (l in z) {
for (m in l) {
row_means <- colMeans(m[ ,3:ncol(m)])
row_to_add <- cbind(m[1,1:2],row_means)
dataset_tidy <- rbind(dataset_tidy, row_to_add)
}
}
warnings()
View(dataset_tidy)
dataset_tidy <- data.frame()    #initialize data frame to add means to
for (l in z) {
for (m in l) {
row_means <- colMeans(m[ ,3:ncol(m)])
#row_to_add <- cbind(m[1,1:2],row_means)
dataset_tidy <- rbind(dataset_tidy, row_means)
}
}
View(dataset_tidy)
z[[1]][[1]]
View(z[[1]][[1]])
cbind(z[[1]][[1]][1,1:2],'foo')
dataset_tidy <- data.frame()    #initialize data frame to add means to
for (l in z) {
for (m in l) {
row_means <- colMeans(m[ ,3:ncol(m)])
row_to_add <- cbind(m[1,1:2],t(row_means))
dataset_tidy <- rbind(dataset_tidy, row_to_add)
}
}
View(dataset_tidy)
?unlink
tidy_headers <- c( ##this is a test
'yolo'
)
f
tidy_headers
View(dataset_tidy)
tidy_headers <- c('SubjectNumber','Activity','BodyAcceleration_Time_Avg_X','BodyAcceleration_Time_Avg_Y','BodyAcceleration_Time_Avg_Z',
'BodyAcceleration_Time_Std_X','BodyAcceleration_Time_Std_Y','BodyAcceleration_Time_Std_Z','Gravity_Time_Avg_X',
'Gravity_Time_Avg_Y','Gravity_Time_Avg_Z','Gravity_Time_Std_X','Gravity_Time_Std_Y','Gravity_Time_Std_Z','BodyJerk_Time_Avg_X',
'BodyJerk_Time_Avg_Y','BodyJerk_Time_Avg_Z','BodyJerk_Time_Std_X','BodyJerk_Time_Std_Y','BodyJerk_Time_Std_Z',
'BodyTurn_Time_Avg_X','BodyTurn_Time_Avg_Y','BodyTurn_Time_Avg_Z','BodyTurn_Time_Std_X','BodyTurn_Time_Std_Y',
'BodyTurn_Time_Std_Z','BodyTurnJerk_Time_Avg_X','BodyTurnJerk_Time_Avg_Y','BodyTurnJerk_Time_Avg_Z','BodyTurnJerk_Time_Std_X',
'BodyTurnJerk_Time_Std_Y','BodyTurnJerk_Time_Std_Z','BodyAccelerationMagnitude_Time_Avg','BodyAccelerationMagnitude_Time_Std',
'GravityMagnitude_Time_Avg','GravityMagnitude_Time_Std','BodyJerkMagnitude_Time_Avg','BodyJerkMagnitude_Time_Std',
'BodyTurnMagnitude_Time_Avg','BodyTurnMagnitude_Std','BodyTurnJerkMagnitude_Avg','BodyTurnJerkMagnitude_Std',
'BodyAcceleration_FFT_Avg_X','BodyAcceleration_FFT_Avg_Y','BodyAcceleration_FFT_Avg_Z','BodyAcceleration_FFT_Std_X',
'BodyAcceleration_FFT_Std_Y','BodyAcceleration_FFT_Std_Z','BodyJerk_FFT_Avg_X','BodyJerk_FFT_Avg_Y','BodyJerk_FFT_Avg_Z',
'BodyJerk_FFT_Std_X','BodyJerk_FFT_Std_Y','BodyJerk_FFT_Std_Z','BodyTurn_FFT_Avg_X','BodyTurn_FFT_Avg_Y','BodyTurn_FFT_Avg_Z',
'BodyTurn_FFT_Std_X','BodyTurn_FFT_Std_Y','BodyTurn_FFT_Std_Z','BodyAccelerationMagnitude_FFT_Avg',
'BodyAccelerationMagnitude_FFT_Std','BodyJerkMagnitude_FFT_Avg','BodyJerkMagnitude_FFT_Std','BodyTurnMagnitude_FFT_Avg',
'BodyTurnMagnitude_FFT_Std','BodyTurnJerkMagnitude_FFT_Avg','BodyTurnJerkMagnitude_FFT_Std')
length(tidy_headers)
colnames(dataset_tidy) <- tidy_headers
View(dataset_tidy)
rm(list=ls())
## Course project for week 4 of 'Getting and Cleaning Data' course on Coursera
## from github repo jmounta1/GettingAndCleaningData/week4
## Project goal: create a tidy data set based on accelerometer data from the Samsung Galazy S smartphone
# load packages
library(tidyverse)
library(lubridate)
# temporary method to load in data (using jmounta1 local directories)
setwd('~/GettingAndCleaningData/UCI HAR Dataset')
vars <- scan('~/GettingAndCleaningData/week4/UCI HAR Dataset/features.txt', what = character(), sep = '\n')
activity_labels <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/activity_labels.txt', col_names = F)
dataset_test <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/test/X_test.txt')
dataset_train <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/train/X_train.txt')
activities_test <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/test/y_test.txt')
activities_train <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/train/y_train.txt')
subjects_test <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/test/subject_test.txt')
subjects_train <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/train/subject_train.txt')
vars <- scan('features.txt', what = character(), sep = '\n')
activity_labels <- read_table('activity_labels.txt', col_names = F)
dataset_test <- read_table('test/X_test.txt')
dataset_train <- read_table('train/X_train.txt')
activities_test <- read_table('test/y_test.txt')
activities_train <- read_table('train/y_train.txt')
subjects_test <- read_table('test/subject_test.txt')
subjects_train <- read_table('train/subject_train.txt')
# tidy data, label datasets
vars <- str_extract(vars, '\\D.*')    #get rid of the numbers in front of the variable names
colnames(dataset_test) <- vars
colnames(dataset_train) <- vars
colnames(activities_test) <- 'activity'
colnames(activities_train) <- 'activity'
colnames(subjects_test) <- 'subject_number'
colnames(subjects_train) <- 'subject_number'
# append activities and subject columns to datasets
dataset_test <- cbind(subjects_test, activities_test, dataset_test)
dataset_train <- cbind(subjects_train, activities_train, dataset_train)
# merge datasets via rbind function, rename activity column from nums to char descriptions
dataset_total <- rbind(dataset_test, dataset_train)
dataset_total$activity <- as.numeric(dataset_total$activity)
index <- 1    # initialize index for counting in the for loop
for (i in dataset_total$activity) {
dataset_total$activity[index] <- activity_labels[i,2]
index <- index + 1
}
# subset the data table to include test/training label, activity description, mean(), and std() for each measurement using regex
colnames(dataset_total) <- tolower(colnames(dataset_total))
subset <- str_which(colnames(dataset_total), '(subject_number)|(activity)|(mean\\(\\))|std\\(\\)')
dataset_subset <- dataset_total[ ,subset]
dataset_subset$activity <- as.character(dataset_subset$activity)   #don't know why activity column was converted to list, but changed back to char
# create a new tidy dataset that takes the average of each variable per activity per subject
# do this by splitting data frame by subject, then use a for loop to further split into
x <- split(dataset_subset[ ,1:ncol(dataset_subset)], dataset_subset$subject_number)   #x is a list with each element containing a matrix of values related to a single subject
z <- list()   #initialize list to contain all splits (by subject and further by activity)
index <- 1
for (k in x) {    #couldn't figure out how to use apply to do this since the factor arg in split changes for each element in x
z[[index]] <- split(k[ ,1:ncol(k)], k[['activity']])
index <- index + 1
}
dataset_tidy <- data.frame()    #initialize data frame to add the average values to, as well as tidy headers (human readable)
tidy_headers <- c('SubjectNumber','Activity','BodyAcceleration_Time_Avg_X','BodyAcceleration_Time_Avg_Y','BodyAcceleration_Time_Avg_Z',
'BodyAcceleration_Time_Std_X','BodyAcceleration_Time_Std_Y','BodyAcceleration_Time_Std_Z','Gravity_Time_Avg_X',
'Gravity_Time_Avg_Y','Gravity_Time_Avg_Z','Gravity_Time_Std_X','Gravity_Time_Std_Y','Gravity_Time_Std_Z','BodyJerk_Time_Avg_X',
'BodyJerk_Time_Avg_Y','BodyJerk_Time_Avg_Z','BodyJerk_Time_Std_X','BodyJerk_Time_Std_Y','BodyJerk_Time_Std_Z',
'BodyTurn_Time_Avg_X','BodyTurn_Time_Avg_Y','BodyTurn_Time_Avg_Z','BodyTurn_Time_Std_X','BodyTurn_Time_Std_Y',
'BodyTurn_Time_Std_Z','BodyTurnJerk_Time_Avg_X','BodyTurnJerk_Time_Avg_Y','BodyTurnJerk_Time_Avg_Z','BodyTurnJerk_Time_Std_X',
'BodyTurnJerk_Time_Std_Y','BodyTurnJerk_Time_Std_Z','BodyAccelerationMagnitude_Time_Avg','BodyAccelerationMagnitude_Time_Std',
'GravityMagnitude_Time_Avg','GravityMagnitude_Time_Std','BodyJerkMagnitude_Time_Avg','BodyJerkMagnitude_Time_Std',
'BodyTurnMagnitude_Time_Avg','BodyTurnMagnitude_Std','BodyTurnJerkMagnitude_Avg','BodyTurnJerkMagnitude_Std',
'BodyAcceleration_FFT_Avg_X','BodyAcceleration_FFT_Avg_Y','BodyAcceleration_FFT_Avg_Z','BodyAcceleration_FFT_Std_X',
'BodyAcceleration_FFT_Std_Y','BodyAcceleration_FFT_Std_Z','BodyJerk_FFT_Avg_X','BodyJerk_FFT_Avg_Y','BodyJerk_FFT_Avg_Z',
'BodyJerk_FFT_Std_X','BodyJerk_FFT_Std_Y','BodyJerk_FFT_Std_Z','BodyTurn_FFT_Avg_X','BodyTurn_FFT_Avg_Y','BodyTurn_FFT_Avg_Z',
'BodyTurn_FFT_Std_X','BodyTurn_FFT_Std_Y','BodyTurn_FFT_Std_Z','BodyAccelerationMagnitude_FFT_Avg',
'BodyAccelerationMagnitude_FFT_Std','BodyJerkMagnitude_FFT_Avg','BodyJerkMagnitude_FFT_Std','BodyTurnMagnitude_FFT_Avg',
'BodyTurnMagnitude_FFT_Std','BodyTurnJerkMagnitude_FFT_Avg','BodyTurnJerkMagnitude_FFT_Std')
for (l in z) {
for (m in l) {
row_means <- colMeans(m[ ,3:ncol(m)])
row_to_add <- cbind(m[1,1:2],t(row_means))
dataset_tidy <- rbind(dataset_tidy, row_to_add)
}
}
colnames(dataset_tidy) <- tidy_headers
View(dataset_tidy)
getwd()
my_table <- read.csv('C:/Users/jmounta1/Downloads/PM25National.csv')
View(my_table)
setwd('GettingAndCleaningData/CourseProject')
View(read.table('tidy11.txt'))
View(read.table('tidy11.txt',header=TRUE))
rm(list=ls())
# Downloading and unzipping dataset
#if(!file.exists("./data")){dir.create("./data")}
#fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
#download.file(fileUrl, destfile = "./data/Dataset.zip")
#unzip(zipfile = "./data/Dataset.zip", exdir = "./data")
# 1. Merging training and test sets to create one data set
# 1.1 Read files
x_train <- read.table("UCI HAR Dataset/train/X_train.txt")
y_train <- read.table("UCI HAR Dataset/train/y_train.txt")
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt")
x_test <- read.table("UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("UCI HAR Dataset/test/y_test.txt")
subject_test <- read.table("./data/UCI HAR Dataset/test/subject_test.txt")
features <- read.table("UCI HAR Dataset/features.txt")
activityLabels <- read.table("UCI HAR Dataset/activity_labels.txt")
colnames(x_train) <- features[,2]
colnames(y_train) <-"activityId"
colnames(subject_train) <- "subjectId"
colnames(x_test) <- features[,2]
colnames(y_test) <- "activityId"
colnames(subject_test) <- "subjectId"
colnames(activityLabels) <- c("activityID", "activityType")
# Merging all data
mrg_train <- cbind(y_train, subject_train, x_train)
mrg_test <- cbind(y_test, subject_test, x_test)
setmerged <- rbind(mrg_train, mrg_test)
# Extracts only the measurements on the mean and standard deviation for each measurement
colNames <- colnames(setAllInOne)
mean_and_std <- (grepl("activityId" , colNames) |
grepl("subjectId" , colNames) |
grepl("mean.." , colNames) |
grepl("std.." , colNames)
)
setForMeanAndStd <- setmerged[ , mean_and_std == TRUE]
# Uses descriptive activity names to name the activities in the data set
setWithActivityNames <- merge(setForMeanAndStd, activityLabels,
by.y="activityId",
all.x=TRUE)
# From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
#5.1 Making a second tidy data set
secTidySet <- aggregate(. ~subjectId + activityId, setWithActivityNames, mean)
secTidySet <- secTidySet[order(secTidySet$subjectId, secTidySet$activityId),]
#5.2 Writing second tidy data set in txt file
write.table(secTidySet, "secTidySet.txt", row.name=FALSE)
rm(liost=ls())
rm(list=ls())
# Downloading and unzipping dataset
#if(!file.exists("./data")){dir.create("./data")}
#fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
#download.file(fileUrl, destfile = "./data/Dataset.zip")
#unzip(zipfile = "./data/Dataset.zip", exdir = "./data")
# 1. Merging training and test sets to create one data set
# 1.1 Read files
x_train <- read.table("UCI HAR Dataset/train/X_train.txt")
y_train <- read.table("UCI HAR Dataset/train/y_train.txt")
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt")
x_test <- read.table("UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("UCI HAR Dataset/test/y_test.txt")
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt")
features <- read.table("UCI HAR Dataset/features.txt")
activityLabels <- read.table("UCI HAR Dataset/activity_labels.txt")
colnames(x_train) <- features[,2]
colnames(y_train) <-"activityId"
colnames(subject_train) <- "subjectId"
colnames(x_test) <- features[,2]
colnames(y_test) <- "activityId"
colnames(subject_test) <- "subjectId"
colnames(activityLabels) <- c("activityID", "activityType")
# Merging all data
mrg_train <- cbind(y_train, subject_train, x_train)
mrg_test <- cbind(y_test, subject_test, x_test)
setmerged <- rbind(mrg_train, mrg_test)
# Extracts only the measurements on the mean and standard deviation for each measurement
colNames <- colnames(setAllInOne)
mean_and_std <- (grepl("activityId" , colNames) |
grepl("subjectId" , colNames) |
grepl("mean.." , colNames) |
grepl("std.." , colNames)
)
setForMeanAndStd <- setmerged[ , mean_and_std == TRUE]
# Uses descriptive activity names to name the activities in the data set
setWithActivityNames <- merge(setForMeanAndStd, activityLabels,
by.y="activityId",
all.x=TRUE)
# From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
#5.1 Making a second tidy data set
secTidySet <- aggregate(. ~subjectId + activityId, setWithActivityNames, mean)
secTidySet <- secTidySet[order(secTidySet$subjectId, secTidySet$activityId),]
#5.2 Writing second tidy data set in txt file
write.table(secTidySet, "secTidySet.txt", row.name=FALSE)
