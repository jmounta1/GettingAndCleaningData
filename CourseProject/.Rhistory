index <- index + 1
}
x <- split(dataset_subset[ ,ncol(dataset_subset)], dataset_subset$subject_number)   #x is a list with each element containing a matrix of values related to a single subject
z <- list()   #initialize list to contain all splits
index <- 1
for (k in x) {    #couldn't figure out how to use apply to do this since the factor arg in split changes for each element in x
z[[index]] <- split(k, k[['activity']])
index <- index + 1
}
View(x)
x <- split(dataset_subset[ ,ncol(dataset_subset)], dataset_subset$subject_number)   #x is a list with each element containing a matrix of values related to a single subject
z <- list()   #initialize list to contain all splits
index <- 1
for (k in x) {    #couldn't figure out how to use apply to do this since the factor arg in split changes for each element in x
z[[index]] <- split(k[ ,1:ncol(k)], k[['activity']])
index <- index + 1
}
x <- split(dataset_subset[ ,1:ncol(dataset_subset)], dataset_subset$subject_number)   #x is a list with each element containing a matrix of values related to a single subject
z <- list()   #initialize list to contain all splits
index <- 1
for (k in x) {    #couldn't figure out how to use apply to do this since the factor arg in split changes for each element in x
z[[index]] <- split(k[ ,1:ncol(k)], k[['activity']])
index <- index + 1
}
View(x)
rm(list=ls())
# load packages
library(tidyverse)
library(lubridate)
# download zip file, unzip, load in data  DO THIS AFTER YOU FINISH THE REST OF THE CODE -------------------------
#fileUrl <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
#temp <- tempfile()
#download.file(fileUrl, temp)
#vars <- read.table(unz(temp,'UCI HAR Dataset/features.txt'))    # variable names for the data sets
#dataset_test <- read.table(unz(temp, 'UCI HAR Dataset/test/X_test'))
#activity <- read.table(unz(temp, 'UCI HAR Dataset/test/y_test'))
# temporary method to load in data (using jmounta1 local directories)
vars <- scan('~/GettingAndCleaningData/week4/UCI HAR Dataset/features.txt', what = character(), sep = '\n')
activity_labels <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/activity_labels.txt', col_names = F)
dataset_test <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/test/X_test.txt')
dataset_train <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/train/X_train.txt')
activities_test <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/test/y_test.txt')
activities_train <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/train/y_train.txt')
subjects_test <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/test/subject_test.txt')
subjects_train <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/train/subject_train.txt')
# tidy data, label datasets
vars <- str_extract(vars, '\\D.*')    #get rid of the numbers in front of the variable names
colnames(dataset_test) <- vars
colnames(dataset_train) <- vars
colnames(activities_test) <- 'activity'
colnames(activities_train) <- 'activity'
colnames(subjects_test) <- 'subject_number'
colnames(subjects_train) <- 'subject_number'
# append activities and subject columns to datasets
dataset_test <- cbind(subjects_test, activities_test, dataset_test)
dataset_train <- cbind(subjects_train, activities_train, dataset_train)
# merge datasets via rbind function, rename activity column from nums to char descriptions
dataset_total <- rbind(dataset_test, dataset_train)
dataset_total$activity <- as.numeric(dataset_total$activity)
index <- 1    # initialize index for counting in the for loop
for (i in dataset_total$activity) {
dataset_total$activity[index] <- activity_labels[i,2]
index <- index + 1
}
# subset the data table to include test/training label, activity description, mean(), and std() for each measurement using regex
colnames(dataset_total) <- tolower(colnames(dataset_total))
subset <- str_which(colnames(dataset_total), '(subject_number)|(activity)|(mean\\(\\))|std\\(\\)')
dataset_subset <- dataset_total[ ,subset]
dataset_subset$activity <- as.character(dataset_subset$activity)   #don't know why activity column was converted to list, but changed back to char
# create a new tidy dataset that takes the average of each variable per activity per subject
# do this by splitting data frame by subject, then use a for loop to further split into
x <- split(dataset_subset[ ,1:ncol(dataset_subset)], dataset_subset$subject_number)   #x is a list with each element containing a matrix of values related to a single subject
z <- list()   #initialize list to contain all splits (by subject and further by activity)
index <- 1
for (k in x) {    #couldn't figure out how to use apply to do this since the factor arg in split changes for each element in x
z[[index]] <- split(k[ ,1:ncol(k)], k[['activity']])
index <- index + 1
}
z <- list()   #initialize list to contain all splits (by subject and further by activity)
index <- 1
for (k in x) {    #couldn't figure out how to use apply to do this since the factor arg in split changes for each element in x
z[index] <- split(k[ ,1:ncol(k)], k[['activity']])
index <- index + 1
}
warnings()
z <- list()   #initialize list to contain all splits (by subject and further by activity)
index <- 1
for (k in x) {    #couldn't figure out how to use apply to do this since the factor arg in split changes for each element in x
z[[index]] <- split(k[ ,1:ncol(k)], k[['activity']])
index <- index + 1
}
View(z)
?data.frame
dataset_tidy <- data.frame()    #initialize data frame to add means to
for (l in z) {
for (m in l) {
row_means <- colMeans(m[ ,3:ncol(m)])
row_to_add <- cbind(m[1,1:2],row_means)
dataset_tidy <- rbind(dataset_tidy, row_to_add)
}
}
warnings()
View(dataset_tidy)
dataset_tidy <- data.frame()    #initialize data frame to add means to
for (l in z) {
for (m in l) {
row_means <- colMeans(m[ ,3:ncol(m)])
#row_to_add <- cbind(m[1,1:2],row_means)
dataset_tidy <- rbind(dataset_tidy, row_means)
}
}
View(dataset_tidy)
z[[1]][[1]]
View(z[[1]][[1]])
cbind(z[[1]][[1]][1,1:2],'foo')
dataset_tidy <- data.frame()    #initialize data frame to add means to
for (l in z) {
for (m in l) {
row_means <- colMeans(m[ ,3:ncol(m)])
row_to_add <- cbind(m[1,1:2],t(row_means))
dataset_tidy <- rbind(dataset_tidy, row_to_add)
}
}
View(dataset_tidy)
?unlink
tidy_headers <- c( ##this is a test
'yolo'
)
f
tidy_headers
View(dataset_tidy)
tidy_headers <- c('SubjectNumber','Activity','BodyAcceleration_Time_Avg_X','BodyAcceleration_Time_Avg_Y','BodyAcceleration_Time_Avg_Z',
'BodyAcceleration_Time_Std_X','BodyAcceleration_Time_Std_Y','BodyAcceleration_Time_Std_Z','Gravity_Time_Avg_X',
'Gravity_Time_Avg_Y','Gravity_Time_Avg_Z','Gravity_Time_Std_X','Gravity_Time_Std_Y','Gravity_Time_Std_Z','BodyJerk_Time_Avg_X',
'BodyJerk_Time_Avg_Y','BodyJerk_Time_Avg_Z','BodyJerk_Time_Std_X','BodyJerk_Time_Std_Y','BodyJerk_Time_Std_Z',
'BodyTurn_Time_Avg_X','BodyTurn_Time_Avg_Y','BodyTurn_Time_Avg_Z','BodyTurn_Time_Std_X','BodyTurn_Time_Std_Y',
'BodyTurn_Time_Std_Z','BodyTurnJerk_Time_Avg_X','BodyTurnJerk_Time_Avg_Y','BodyTurnJerk_Time_Avg_Z','BodyTurnJerk_Time_Std_X',
'BodyTurnJerk_Time_Std_Y','BodyTurnJerk_Time_Std_Z','BodyAccelerationMagnitude_Time_Avg','BodyAccelerationMagnitude_Time_Std',
'GravityMagnitude_Time_Avg','GravityMagnitude_Time_Std','BodyJerkMagnitude_Time_Avg','BodyJerkMagnitude_Time_Std',
'BodyTurnMagnitude_Time_Avg','BodyTurnMagnitude_Std','BodyTurnJerkMagnitude_Avg','BodyTurnJerkMagnitude_Std',
'BodyAcceleration_FFT_Avg_X','BodyAcceleration_FFT_Avg_Y','BodyAcceleration_FFT_Avg_Z','BodyAcceleration_FFT_Std_X',
'BodyAcceleration_FFT_Std_Y','BodyAcceleration_FFT_Std_Z','BodyJerk_FFT_Avg_X','BodyJerk_FFT_Avg_Y','BodyJerk_FFT_Avg_Z',
'BodyJerk_FFT_Std_X','BodyJerk_FFT_Std_Y','BodyJerk_FFT_Std_Z','BodyTurn_FFT_Avg_X','BodyTurn_FFT_Avg_Y','BodyTurn_FFT_Avg_Z',
'BodyTurn_FFT_Std_X','BodyTurn_FFT_Std_Y','BodyTurn_FFT_Std_Z','BodyAccelerationMagnitude_FFT_Avg',
'BodyAccelerationMagnitude_FFT_Std','BodyJerkMagnitude_FFT_Avg','BodyJerkMagnitude_FFT_Std','BodyTurnMagnitude_FFT_Avg',
'BodyTurnMagnitude_FFT_Std','BodyTurnJerkMagnitude_FFT_Avg','BodyTurnJerkMagnitude_FFT_Std')
length(tidy_headers)
colnames(dataset_tidy) <- tidy_headers
View(dataset_tidy)
rm(list=ls())
## Course project for week 4 of 'Getting and Cleaning Data' course on Coursera
## from github repo jmounta1/GettingAndCleaningData/week4
## Project goal: create a tidy data set based on accelerometer data from the Samsung Galazy S smartphone
# load packages
library(tidyverse)
library(lubridate)
# temporary method to load in data (using jmounta1 local directories)
setwd('~/GettingAndCleaningData/UCI HAR Dataset')
vars <- scan('~/GettingAndCleaningData/week4/UCI HAR Dataset/features.txt', what = character(), sep = '\n')
activity_labels <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/activity_labels.txt', col_names = F)
dataset_test <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/test/X_test.txt')
dataset_train <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/train/X_train.txt')
activities_test <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/test/y_test.txt')
activities_train <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/train/y_train.txt')
subjects_test <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/test/subject_test.txt')
subjects_train <- read_table('~/GettingAndCleaningData/week4/UCI HAR Dataset/train/subject_train.txt')
vars <- scan('features.txt', what = character(), sep = '\n')
activity_labels <- read_table('activity_labels.txt', col_names = F)
dataset_test <- read_table('test/X_test.txt')
dataset_train <- read_table('train/X_train.txt')
activities_test <- read_table('test/y_test.txt')
activities_train <- read_table('train/y_train.txt')
subjects_test <- read_table('test/subject_test.txt')
subjects_train <- read_table('train/subject_train.txt')
# tidy data, label datasets
vars <- str_extract(vars, '\\D.*')    #get rid of the numbers in front of the variable names
colnames(dataset_test) <- vars
colnames(dataset_train) <- vars
colnames(activities_test) <- 'activity'
colnames(activities_train) <- 'activity'
colnames(subjects_test) <- 'subject_number'
colnames(subjects_train) <- 'subject_number'
# append activities and subject columns to datasets
dataset_test <- cbind(subjects_test, activities_test, dataset_test)
dataset_train <- cbind(subjects_train, activities_train, dataset_train)
# merge datasets via rbind function, rename activity column from nums to char descriptions
dataset_total <- rbind(dataset_test, dataset_train)
dataset_total$activity <- as.numeric(dataset_total$activity)
index <- 1    # initialize index for counting in the for loop
for (i in dataset_total$activity) {
dataset_total$activity[index] <- activity_labels[i,2]
index <- index + 1
}
# subset the data table to include test/training label, activity description, mean(), and std() for each measurement using regex
colnames(dataset_total) <- tolower(colnames(dataset_total))
subset <- str_which(colnames(dataset_total), '(subject_number)|(activity)|(mean\\(\\))|std\\(\\)')
dataset_subset <- dataset_total[ ,subset]
dataset_subset$activity <- as.character(dataset_subset$activity)   #don't know why activity column was converted to list, but changed back to char
# create a new tidy dataset that takes the average of each variable per activity per subject
# do this by splitting data frame by subject, then use a for loop to further split into
x <- split(dataset_subset[ ,1:ncol(dataset_subset)], dataset_subset$subject_number)   #x is a list with each element containing a matrix of values related to a single subject
z <- list()   #initialize list to contain all splits (by subject and further by activity)
index <- 1
for (k in x) {    #couldn't figure out how to use apply to do this since the factor arg in split changes for each element in x
z[[index]] <- split(k[ ,1:ncol(k)], k[['activity']])
index <- index + 1
}
dataset_tidy <- data.frame()    #initialize data frame to add the average values to, as well as tidy headers (human readable)
tidy_headers <- c('SubjectNumber','Activity','BodyAcceleration_Time_Avg_X','BodyAcceleration_Time_Avg_Y','BodyAcceleration_Time_Avg_Z',
'BodyAcceleration_Time_Std_X','BodyAcceleration_Time_Std_Y','BodyAcceleration_Time_Std_Z','Gravity_Time_Avg_X',
'Gravity_Time_Avg_Y','Gravity_Time_Avg_Z','Gravity_Time_Std_X','Gravity_Time_Std_Y','Gravity_Time_Std_Z','BodyJerk_Time_Avg_X',
'BodyJerk_Time_Avg_Y','BodyJerk_Time_Avg_Z','BodyJerk_Time_Std_X','BodyJerk_Time_Std_Y','BodyJerk_Time_Std_Z',
'BodyTurn_Time_Avg_X','BodyTurn_Time_Avg_Y','BodyTurn_Time_Avg_Z','BodyTurn_Time_Std_X','BodyTurn_Time_Std_Y',
'BodyTurn_Time_Std_Z','BodyTurnJerk_Time_Avg_X','BodyTurnJerk_Time_Avg_Y','BodyTurnJerk_Time_Avg_Z','BodyTurnJerk_Time_Std_X',
'BodyTurnJerk_Time_Std_Y','BodyTurnJerk_Time_Std_Z','BodyAccelerationMagnitude_Time_Avg','BodyAccelerationMagnitude_Time_Std',
'GravityMagnitude_Time_Avg','GravityMagnitude_Time_Std','BodyJerkMagnitude_Time_Avg','BodyJerkMagnitude_Time_Std',
'BodyTurnMagnitude_Time_Avg','BodyTurnMagnitude_Std','BodyTurnJerkMagnitude_Avg','BodyTurnJerkMagnitude_Std',
'BodyAcceleration_FFT_Avg_X','BodyAcceleration_FFT_Avg_Y','BodyAcceleration_FFT_Avg_Z','BodyAcceleration_FFT_Std_X',
'BodyAcceleration_FFT_Std_Y','BodyAcceleration_FFT_Std_Z','BodyJerk_FFT_Avg_X','BodyJerk_FFT_Avg_Y','BodyJerk_FFT_Avg_Z',
'BodyJerk_FFT_Std_X','BodyJerk_FFT_Std_Y','BodyJerk_FFT_Std_Z','BodyTurn_FFT_Avg_X','BodyTurn_FFT_Avg_Y','BodyTurn_FFT_Avg_Z',
'BodyTurn_FFT_Std_X','BodyTurn_FFT_Std_Y','BodyTurn_FFT_Std_Z','BodyAccelerationMagnitude_FFT_Avg',
'BodyAccelerationMagnitude_FFT_Std','BodyJerkMagnitude_FFT_Avg','BodyJerkMagnitude_FFT_Std','BodyTurnMagnitude_FFT_Avg',
'BodyTurnMagnitude_FFT_Std','BodyTurnJerkMagnitude_FFT_Avg','BodyTurnJerkMagnitude_FFT_Std')
for (l in z) {
for (m in l) {
row_means <- colMeans(m[ ,3:ncol(m)])
row_to_add <- cbind(m[1,1:2],t(row_means))
dataset_tidy <- rbind(dataset_tidy, row_to_add)
}
}
colnames(dataset_tidy) <- tidy_headers
View(dataset_tidy)
# Input
df <- data.frame(x = rnorm(10), y = rnorm(10))
neat_df <- data.frame(x = rnorm(5), y = rnorm(5))
hot_soup <- data.frame(x = rnorm(3), y = rnorm(3))
cool_function <- function(your_dataframe, name) {
df_string <- deparse(substitute(your_dataframe))
new_name <- paste0(df_string,"_",name)
assign(new_name, your_dataframe, envir = .GlobalEnv)
}
# Output:
# A variable named df_name
# Examples:
# cool_function(neat_df, "bees") ---> neat_df_bees
# cool_function(hot_soup, "cold_heart") ---> hot_soup_cold_heart
cool_function(neat_df, 'bees')
getwd()
setwd('/GettingAndCleaningData/CourseProject/UCI HAR Dataset')
setwd('GettingAndCleaningData/CourseProject/UCI HAR Dataset')
setwd(~/)
setwd('~')
getwD()
getwd()
setwd('GettingAndCleaningData/CourseProject')
View('Samsungs_data_Tidy.txt')
View('Samsung_data_Tidy.txt')
table <- read.table('Samsung_Data_Tidy.txt')
View(table)
table <- read.table('Samsung_Data_Tidy.txt',header = TRUE)
getwd()
?file.path
wd <- file.path(getwd())
wd
wd <- getwd()
wd
rm(list=ls())
getwd()
## Course project for week 4 of 'Getting and Cleaning Data' course on Coursera
## from github repo jmounta1/GettingAndCleaningData/
## Project goal: create a tidy data set based on accelerometer data from the Samsung Galaxy S smartphone
# load packages
library(tidyverse)
# load in data - NOTE: this requires setting the working directory to include the necessary files
# if you downloaded the directory and script from jmounta1/GettingAndCleaningData/tree/master/CourseProject, set the working directory to the
# directory that contains run_analysis.R and the UCI HAR Dataset folder
vars <- scan('UCI HAR Dataset/features.txt', what = character(), sep = '\n')
activity_labels <- read_table('UCI HAR Dataset/activity_labels.txt', col_names = F)
dataset_test <- read_table('UCI HAR Dataset/test/X_test.txt')
dataset_train <- read_table('UCI HAR Dataset/train/X_train.txt')
activities_test <- read_table('UCI HAR Dataset/test/y_test.txt')
activities_train <- read_table('UCI HAR Dataset/train/y_train.txt')
subjects_test <- read_table('UCI HAR Dataset/test/subject_test.txt')
subjects_train <- read_table('UCI HAR Dataset/train/subject_train.txt')
# tidy data, label datasets
vars <- str_extract(vars, '\\D.*')    #get rid of the numbers in front of the variable names
colnames(dataset_test) <- vars
colnames(dataset_train) <- vars
colnames(activities_test) <- 'activity'
colnames(activities_train) <- 'activity'
colnames(subjects_test) <- 'subject_number'
colnames(subjects_train) <- 'subject_number'
# append activities and subject columns to datasets
dataset_test <- cbind(subjects_test, activities_test, dataset_test)
dataset_train <- cbind(subjects_train, activities_train, dataset_train)
# merge datasets via rbind function, rename activity column from nums to char descriptions
dataset_total <- rbind(dataset_test, dataset_train)
dataset_total$activity <- as.numeric(dataset_total$activity)
index <- 1    # initialize index for counting in the for loop
for (i in dataset_total$activity) {
dataset_total$activity[index] <- activity_labels[i,2]
index <- index + 1
}
# subset the data table to include test/training label, activity description, mean(), and std() for each measurement using regex
colnames(dataset_total) <- tolower(colnames(dataset_total))
subset <- str_which(colnames(dataset_total), '(subject_number)|(activity)|(mean\\(\\))|std\\(\\)')
dataset_subset <- dataset_total[ ,subset]
dataset_subset$activity <- as.character(dataset_subset$activity)   #don't know why activity column was converted to list, but changed back to char
# create a new tidy dataset that takes the average of each variable per activity per subject
# do this by splitting data frame by subject, then use a for loop to further split into
dataset_split1 <- split(dataset_subset[ ,1:ncol(dataset_subset)], dataset_subset$subject_number)   #x is a list with each element containing a matrix of values related to a single subject
dataset_split2 <- list()   #initialize list to contain all splits (by subject and further by activity)
index <- 1
for (k in dataset_split1) {    #couldn't figure out how to use apply to do this since the factor arg in split changes for each element in x
dataset_split2[[index]] <- split(k[ ,1:ncol(k)], k[['activity']])
index <- index + 1
}
dataset_tidy <- data.frame()    #initialize data frame to add the average values to, as well as tidy headers (human readable)
tidy_headers <- c('SubjectNumber','Activity','BodyAcceleration_Time_Avg_X','BodyAcceleration_Time_Avg_Y','BodyAcceleration_Time_Avg_Z',
'BodyAcceleration_Time_Std_X','BodyAcceleration_Time_Std_Y','BodyAcceleration_Time_Std_Z','Gravity_Time_Avg_X',
'Gravity_Time_Avg_Y','Gravity_Time_Avg_Z','Gravity_Time_Std_X','Gravity_Time_Std_Y','Gravity_Time_Std_Z','BodyJerk_Time_Avg_X',
'BodyJerk_Time_Avg_Y','BodyJerk_Time_Avg_Z','BodyJerk_Time_Std_X','BodyJerk_Time_Std_Y','BodyJerk_Time_Std_Z',
'BodyTurn_Time_Avg_X','BodyTurn_Time_Avg_Y','BodyTurn_Time_Avg_Z','BodyTurn_Time_Std_X','BodyTurn_Time_Std_Y',
'BodyTurn_Time_Std_Z','BodyTurnJerk_Time_Avg_X','BodyTurnJerk_Time_Avg_Y','BodyTurnJerk_Time_Avg_Z','BodyTurnJerk_Time_Std_X',
'BodyTurnJerk_Time_Std_Y','BodyTurnJerk_Time_Std_Z','BodyAccelerationMagnitude_Time_Avg','BodyAccelerationMagnitude_Time_Std',
'GravityMagnitude_Time_Avg','GravityMagnitude_Time_Std','BodyJerkMagnitude_Time_Avg','BodyJerkMagnitude_Time_Std',
'BodyTurnMagnitude_Time_Avg','BodyTurnMagnitude_Std','BodyTurnJerkMagnitude_Avg','BodyTurnJerkMagnitude_Std',
'BodyAcceleration_FFT_Avg_X','BodyAcceleration_FFT_Avg_Y','BodyAcceleration_FFT_Avg_Z','BodyAcceleration_FFT_Std_X',
'BodyAcceleration_FFT_Std_Y','BodyAcceleration_FFT_Std_Z','BodyJerk_FFT_Avg_X','BodyJerk_FFT_Avg_Y','BodyJerk_FFT_Avg_Z',
'BodyJerk_FFT_Std_X','BodyJerk_FFT_Std_Y','BodyJerk_FFT_Std_Z','BodyTurn_FFT_Avg_X','BodyTurn_FFT_Avg_Y','BodyTurn_FFT_Avg_Z',
'BodyTurn_FFT_Std_X','BodyTurn_FFT_Std_Y','BodyTurn_FFT_Std_Z','BodyAccelerationMagnitude_FFT_Avg',
'BodyAccelerationMagnitude_FFT_Std','BodyJerkMagnitude_FFT_Avg','BodyJerkMagnitude_FFT_Std','BodyTurnMagnitude_FFT_Avg',
'BodyTurnMagnitude_FFT_Std','BodyTurnJerkMagnitude_FFT_Avg','BodyTurnJerkMagnitude_FFT_Std')
for (l in dataset_split2) {
for (m in l) {
row_means <- colMeans(m[ ,3:ncol(m)])
row_to_add <- cbind(m[1,1:2],t(row_means))
dataset_tidy <- rbind(dataset_tidy, row_to_add)
}
}
colnames(dataset_tidy) <- tidy_headers
# to produce a new text file containing the tidy data set, use the following code
write.table(dataset_tidy, file = 'test_write', row.names = FALSE)
table2 <- read.table('test.write', header = TRUE)
View(dataset_tidy)
mytable <- read.table('Samsung_Data_tidy.txt', header = TRUE)
View(mytable)
View(dataset_tidy)
headers_old <- colnames(dataset_test)
View(headers_old)
View(subset)
headers_old <- colnames(dataset_subset)
View(headers_old)
write.table(headers_old, 'UCI HAR variables.txt')
write.table(tidy_headers, 'tidy_headers.txt')
write.table(headers_old, 'old_headers.txt')
## Course project for week 4 of 'Getting and Cleaning Data' course on Coursera
## from github repo jmounta1/GettingAndCleaningData
## Project goal: create a tidy data set based on accelerometer data from the Samsung Galaxy S smartphone
# load packages
library(tidyverse)
# load in data - NOTE: this requires setting the working directory to include the necessary files
# if you downloaded the directory and script from jmounta1/GettingAndCleaningData/tree/master/CourseProject, set the working directory to the
# directory that contains run_analysis.R and the UCI HAR Dataset folder
vars <- scan('UCI HAR Dataset/features.txt', what = character(), sep = '\n')
activity_labels <- read_table('UCI HAR Dataset/activity_labels.txt', col_names = F)
dataset_test <- read_table('UCI HAR Dataset/test/X_test.txt')
dataset_train <- read_table('UCI HAR Dataset/train/X_train.txt')
activities_test <- read_table('UCI HAR Dataset/test/y_test.txt')
activities_train <- read_table('UCI HAR Dataset/train/y_train.txt')
subjects_test <- read_table('UCI HAR Dataset/test/subject_test.txt')
subjects_train <- read_table('UCI HAR Dataset/train/subject_train.txt')
# tidy data, label datasets
vars <- str_extract(vars, '\\D.*')    #get rid of the numbers in front of the variable names
colnames(dataset_test) <- vars
colnames(dataset_train) <- vars
colnames(activities_test) <- 'activity'
colnames(activities_train) <- 'activity'
colnames(subjects_test) <- 'subject_number'
colnames(subjects_train) <- 'subject_number'
# append activities and subject columns to datasets
dataset_test <- cbind(subjects_test, activities_test, dataset_test)
dataset_train <- cbind(subjects_train, activities_train, dataset_train)
# merge datasets via rbind function, rename activity column from nums to char descriptions
dataset_total <- rbind(dataset_test, dataset_train)
dataset_total$activity <- as.numeric(dataset_total$activity)
index <- 1    # initialize index for counting in the for loop
for (i in dataset_total$activity) {
dataset_total$activity[index] <- activity_labels[i,2]
index <- index + 1
}
# subset the data table to include test/training label, activity description, mean(), and std() for each measurement using regex
colnames(dataset_total) <- tolower(colnames(dataset_total))
subset <- str_which(colnames(dataset_total), '(subject_number)|(activity)|(mean\\(\\))|std\\(\\)')
dataset_subset <- dataset_total[ ,subset]
dataset_subset$activity <- as.character(dataset_subset$activity)   #don't know why activity column was converted to list, but changed back to char
# create a new tidy dataset that takes the average of each variable per activity per subject
# do this by splitting data frame by subject, then use a for loop to further split into
dataset_split1 <- split(dataset_subset[ ,1:ncol(dataset_subset)], dataset_subset$subject_number)   #x is a list with each element containing a matrix of values related to a single subject
dataset_split2 <- list()   #initialize list to contain all splits (by subject and further by activity)
index <- 1
for (k in dataset_split1) {    #couldn't figure out how to use apply to do this since the factor arg in split changes for each element in x
dataset_split2[[index]] <- split(k[ ,1:ncol(k)], k[['activity']])
index <- index + 1
}
dataset_tidy <- data.frame()    #initialize data frame to add the average values to, as well as tidy headers (human readable)
tidy_headers <- c('Subject','Activity','BodyAcceleration_Time_Avg_X','BodyAcceleration_Time_Avg_Y','BodyAcceleration_Time_Avg_Z',
'BodyAcceleration_Time_Std_X','BodyAcceleration_Time_Std_Y','BodyAcceleration_Time_Std_Z','Gravity_Time_Avg_X',
'Gravity_Time_Avg_Y','Gravity_Time_Avg_Z','Gravity_Time_Std_X','Gravity_Time_Std_Y','Gravity_Time_Std_Z','BodyJerk_Time_Avg_X',
'BodyJerk_Time_Avg_Y','BodyJerk_Time_Avg_Z','BodyJerk_Time_Std_X','BodyJerk_Time_Std_Y','BodyJerk_Time_Std_Z',
'BodyTurn_Time_Avg_X','BodyTurn_Time_Avg_Y','BodyTurn_Time_Avg_Z','BodyTurn_Time_Std_X','BodyTurn_Time_Std_Y',
'BodyTurn_Time_Std_Z','BodyTurnJerk_Time_Avg_X','BodyTurnJerk_Time_Avg_Y','BodyTurnJerk_Time_Avg_Z','BodyTurnJerk_Time_Std_X',
'BodyTurnJerk_Time_Std_Y','BodyTurnJerk_Time_Std_Z','BodyAccelerationMagnitude_Time_Avg','BodyAccelerationMagnitude_Time_Std',
'GravityMagnitude_Time_Avg','GravityMagnitude_Time_Std','BodyJerkMagnitude_Time_Avg','BodyJerkMagnitude_Time_Std',
'BodyTurnMagnitude_Time_Avg','BodyTurnMagnitude_Std','BodyTurnJerkMagnitude_Avg','BodyTurnJerkMagnitude_Std',
'BodyAcceleration_FFT_Avg_X','BodyAcceleration_FFT_Avg_Y','BodyAcceleration_FFT_Avg_Z','BodyAcceleration_FFT_Std_X',
'BodyAcceleration_FFT_Std_Y','BodyAcceleration_FFT_Std_Z','BodyJerk_FFT_Avg_X','BodyJerk_FFT_Avg_Y','BodyJerk_FFT_Avg_Z',
'BodyJerk_FFT_Std_X','BodyJerk_FFT_Std_Y','BodyJerk_FFT_Std_Z','BodyTurn_FFT_Avg_X','BodyTurn_FFT_Avg_Y','BodyTurn_FFT_Avg_Z',
'BodyTurn_FFT_Std_X','BodyTurn_FFT_Std_Y','BodyTurn_FFT_Std_Z','BodyAccelerationMagnitude_FFT_Avg',
'BodyAccelerationMagnitude_FFT_Std','BodyJerkMagnitude_FFT_Avg','BodyJerkMagnitude_FFT_Std','BodyTurnMagnitude_FFT_Avg',
'BodyTurnMagnitude_FFT_Std','BodyTurnJerkMagnitude_FFT_Avg','BodyTurnJerkMagnitude_FFT_Std')
for (l in dataset_split2) {
for (m in l) {
row_means <- colMeans(m[ ,3:ncol(m)])
row_to_add <- cbind(m[1,1:2],t(row_means))
dataset_tidy <- rbind(dataset_tidy, row_to_add)
}
}
colnames(dataset_tidy) <- tidy_headers
write.table(dataset_tidy, file = 'Samsun_Data_Tidy.txt', row.names = FALSE)
write.table(dataset_tidy, file = 'Samsung_Data_Tidy.txt', row.names = FALSE)
?write.table
View(tidy_headers)
?write_lines
?writeLines
writeLines(tidy_headers, 'headers_lines')
writeLines(tidy_headers, 'headers_lines.txt')
getwd()
## Course project for week 4 of 'Getting and Cleaning Data' course on Coursera
## from github repo jmounta1/GettingAndCleaningData
## Project goal: create a tidy data set based on accelerometer data from the Samsung Galaxy S smartphone
# load packages
library(tidyverse)
# load in data - NOTE: this requires setting the working directory to include the necessary files
# if you downloaded the directory and script from jmounta1/GettingAndCleaningData/tree/master/CourseProject, set the working directory to the
# directory that contains run_analysis.R and the UCI HAR Dataset folder
vars <- scan('UCI HAR Dataset/features.txt', what = character(), sep = '\n')
activity_labels <- read_table('UCI HAR Dataset/activity_labels.txt', col_names = F)
dataset_test <- read_table('UCI HAR Dataset/test/X_test.txt')
dataset_train <- read_table('UCI HAR Dataset/train/X_train.txt')
activities_test <- read_table('UCI HAR Dataset/test/y_test.txt')
activities_train <- read_table('UCI HAR Dataset/train/y_train.txt')
subjects_test <- read_table('UCI HAR Dataset/test/subject_test.txt')
subjects_train <- read_table('UCI HAR Dataset/train/subject_train.txt')
# tidy data, label datasets
vars <- str_extract(vars, '\\D.*')    #get rid of the numbers in front of the variable names
colnames(dataset_test) <- vars
colnames(dataset_train) <- vars
colnames(activities_test) <- 'activity'
colnames(activities_train) <- 'activity'
colnames(subjects_test) <- 'subject_number'
colnames(subjects_train) <- 'subject_number'
# append activities and subject columns to datasets
dataset_test <- cbind(subjects_test, activities_test, dataset_test)
dataset_train <- cbind(subjects_train, activities_train, dataset_train)
# merge datasets via rbind function, rename activity column from nums to char descriptions
dataset_total <- rbind(dataset_test, dataset_train)
dataset_total$activity <- as.numeric(dataset_total$activity)
index <- 1    # initialize index for counting in the for loop
for (i in dataset_total$activity) {
dataset_total$activity[index] <- activity_labels[i,2]
index <- index + 1
}
# subset the data table to include test/training label, activity description, mean(), and std() for each measurement using regex
colnames(dataset_total) <- tolower(colnames(dataset_total))
subset <- str_which(colnames(dataset_total), '(subject_number)|(activity)|(mean\\(\\))|std\\(\\)')
dataset_subset <- dataset_total[ ,subset]
dataset_subset$activity <- as.character(dataset_subset$activity)   #don't know why activity column was converted to list, but changed back to char
# create a new tidy dataset that takes the average of each variable per activity per subject
# do this by splitting data frame by subject, then use a for loop to further split into
dataset_split1 <- split(dataset_subset[ ,1:ncol(dataset_subset)], dataset_subset$subject_number)   #x is a list with each element containing a matrix of values related to a single subject
dataset_split2 <- list()   #initialize list to contain all splits (by subject and further by activity)
index <- 1
for (k in dataset_split1) {    #couldn't figure out how to use apply to do this since the factor arg in split changes for each element in x
dataset_split2[[index]] <- split(k[ ,1:ncol(k)], k[['activity']])
index <- index + 1
}
dataset_tidy <- data.frame()    #initialize data frame to add the average values to, as well as tidy headers (human readable)
tidy_headers <- c('Subject','Activity','BodyAcceleration_Time_Avg_X','BodyAcceleration_Time_Avg_Y','BodyAcceleration_Time_Avg_Z',
'BodyAcceleration_Time_Std_X','BodyAcceleration_Time_Std_Y','BodyAcceleration_Time_Std_Z','Gravity_Time_Avg_X',
'Gravity_Time_Avg_Y','Gravity_Time_Avg_Z','Gravity_Time_Std_X','Gravity_Time_Std_Y','Gravity_Time_Std_Z','BodyJerk_Time_Avg_X',
'BodyJerk_Time_Avg_Y','BodyJerk_Time_Avg_Z','BodyJerk_Time_Std_X','BodyJerk_Time_Std_Y','BodyJerk_Time_Std_Z',
'BodyTurn_Time_Avg_X','BodyTurn_Time_Avg_Y','BodyTurn_Time_Avg_Z','BodyTurn_Time_Std_X','BodyTurn_Time_Std_Y',
'BodyTurn_Time_Std_Z','BodyTurnJerk_Time_Avg_X','BodyTurnJerk_Time_Avg_Y','BodyTurnJerk_Time_Avg_Z','BodyTurnJerk_Time_Std_X',
'BodyTurnJerk_Time_Std_Y','BodyTurnJerk_Time_Std_Z','BodyAccelerationMagnitude_Time_Avg','BodyAccelerationMagnitude_Time_Std',
'GravityMagnitude_Time_Avg','GravityMagnitude_Time_Std','BodyJerkMagnitude_Time_Avg','BodyJerkMagnitude_Time_Std',
'BodyTurnMagnitude_Time_Avg','BodyTurnMagnitude_Std','BodyTurnJerkMagnitude_Avg','BodyTurnJerkMagnitude_Std',
'BodyAcceleration_FFT_Avg_X','BodyAcceleration_FFT_Avg_Y','BodyAcceleration_FFT_Avg_Z','BodyAcceleration_FFT_Std_X',
'BodyAcceleration_FFT_Std_Y','BodyAcceleration_FFT_Std_Z','BodyJerk_FFT_Avg_X','BodyJerk_FFT_Avg_Y','BodyJerk_FFT_Avg_Z',
'BodyJerk_FFT_Std_X','BodyJerk_FFT_Std_Y','BodyJerk_FFT_Std_Z','BodyTurn_FFT_Avg_X','BodyTurn_FFT_Avg_Y','BodyTurn_FFT_Avg_Z',
'BodyTurn_FFT_Std_X','BodyTurn_FFT_Std_Y','BodyTurn_FFT_Std_Z','BodyAccelerationMagnitude_FFT_Avg',
'BodyAccelerationMagnitude_FFT_Std','BodyJerkMagnitude_FFT_Avg','BodyJerkMagnitude_FFT_Std','BodyTurnMagnitude_FFT_Avg',
'BodyTurnMagnitude_FFT_Std','BodyTurnJerkMagnitude_FFT_Avg','BodyTurnJerkMagnitude_FFT_Std')
for (l in dataset_split2) {
for (m in l) {
row_means <- colMeans(m[ ,3:ncol(m)])
row_to_add <- cbind(m[1,1:2],t(row_means))
dataset_tidy <- rbind(dataset_tidy, row_to_add)
}
}
colnames(dataset_tidy) <- tidy_headers
write.table(dataset_tidy, file = 'Samsung_Data_Tidy.txt', row.names = FALSE)
